// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  nickname           String
  role               UserRole
  createdTournaments BeerPongTournament[]
  beerPongTeams      UserBeerPongTeam[]
}

enum UserRole {
  ADMIN
  USER
  ANONYMOUS
}

model BeerPongTournament {
  id        String                   @id @default(cuid())
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  status    BeerPongTournamentStatus @default(CREATED)
  access    BeerPongTournamentAccess
  pinCode   String?                  @unique
  creator   User                     @relation(fields: [creatorId], references: [id])
  creatorId String
  matches   BeerPongMatch[]
  teams     BeerPongTeam[]
}

model BeerPongMatch {
  id              String             @id @default(cuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  tournament      BeerPongTournament @relation(fields: [tournamentId], references: [id])
  tournamentId    String
  round           Int
  team1           BeerPongTeam       @relation(fields: [team1Id], references: [id], name: "team1")
  team1Id         String
  team2           BeerPongTeam       @relation(fields: [team2Id], references: [id], name: "team2")
  team2Id         String
  winner          BeerPongTeam?      @relation(fields: [winnerTeamId], references: [id], name: "winnerTeam")
  winnerTeamId    String?
  nextMatch       BeerPongMatch?     @relation(fields: [beerPongMatchId], references: [id], name: "nextMatch")
  nextMatchId     String?
  previousMatches BeerPongMatch[]    @relation("nextMatch")
  beerPongMatchId String?
}

model BeerPongTeam {
  id            String             @id @default(cuid())
  name          String
  team1Matches  BeerPongMatch[]    @relation("team1")
  team2Matches  BeerPongMatch[]    @relation("team2")
  winnerMatches BeerPongMatch[]    @relation("winnerTeam")
  tournament    BeerPongTournament @relation(fields: [tournamentId], references: [id])
  tournamentId  String
  members       UserBeerPongTeam[]
}

model UserBeerPongTeam {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  beerPongTeam   BeerPongTeam @relation(fields: [beerPongTeamId], references: [id], onDelete: Cascade)
  beerPongTeamId String

  @@id([userId, beerPongTeamId])
}

enum BeerPongTournamentAccess {
  PUBLIC
  PIN
}

enum BeerPongTournamentStatus {
  CREATED
  ACTIVE
  FINISHED
}
