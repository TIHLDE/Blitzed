{
	// Place your Blitzed workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Endpoint controller" :{
		"scope": "typescript",
		"prefix": "con",
		"body": [
			"import { Controller } from '~/server/api/root';",
			"",
			"import { db } from '~/server/db';",
			"import { z } from 'zod';",
			"import { protectedProcedure } from '~/server/api/trpc'",
			"",
			"const InputSchema = z.object({",
			"  ${2: input type}",
			"});",
			"",
			"const OutputSchema = z.object({",
			"  ${3: output type}",
			"});",
			"",
			"const handler: Controller<",
				"z.infer<typeof InputSchema>,",
				"z.infer<typeof OutputSchema>",
			"> = async ({ input, ctx }) => {",
			"  $0",
			"};",
			"",
			"export default protectedProcedure",
				".input(InputSchema)",
				".output(OutputSchema)",
				".${1:mutation or query}(handler);",
		],
		"description": "Create a new tRPC endpoint controller"
	}
}

